AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.
    Default: 'vpc-f3fce188'

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at two subnets in your selected VPC.
    Default: 'subnet-badb0994,subnet-87a6c2cd'

  DBUsername:
    Type: String
    Description: Database username
    Default: 'postgres'

  DBPassword:
    Type: String
    NoEcho: true
    Description: Database password
    Default: 'password'

  DBName:
    Type: String
    Default: starsona

Resources:
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: !Ref 'AWS::StackName'
      SubnetIds: !Ref 'Subnets'

  VPCSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Join ['-', [!Ref 'AWS::StackName', 'VPC Security Group']]
      VpcId: !Ref 'VpcId'

#  DB:
#    Type: 'AWS::RDS::DBInstance'
#    Properties:
#      DBName: !Ref 'DBName'
#      AllocatedStorage: 5
#      DBInstanceClass: 'db.t2.micro'
#      Engine: 'postgres'
#      EngineVersion: '9.5'
#      MasterUsername: !Ref 'DBUsername'
#      MasterUserPassword: !Ref 'DBPassword'
#      DBSubnetGroupName: !Ref 'DBSubnetGroup'
#      VPCSecurityGroups: [ !Ref 'VPCSecurityGroup' ]

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref 'AWS::StackName'

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref 'AWS::StackName', 'ALB Security Group']]
      VpcId: !Ref 'VpcId'

  ALBSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ALBSecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref 'AWS::StackName', 'ECS Security Group']]
      VpcId: !Ref 'VpcId'

  ECSSecurityGroupALBports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      SourceSecurityGroupId: !Ref 'ALBSecurityGroup'

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref 'AWS::StackName'
      RetentionInDays: 14

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
              Service: ['ecs-tasks.amazonaws.com']
          Action: ['sts:AssumeRole']
  #    Policies:
  #    - PolicyName: service-autoscaling
  #      Path: /
  #      Policies:
  #      - PolicyName: ecs-service
  #        PolicyDocument:
  #          Statement:
  #          - Effect: Allow
  #            Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
  #              'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
  #              'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress']
  #            Resource: '*'


  Task:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['-', [!Ref 'AWS::StackName', ecs-demo-app]]
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      ExecutionRoleArn: !Ref 'TaskExecutionRole'
      Cpu: 256
      Memory: 0.5GB
      ContainerDefinitions:
      - Name: simple-app
        Essential: 'true'
        Image: httpd:2.4
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'AWS::StackName'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: ecs-demo-app
        MountPoints:
        - ContainerPath: /usr/local/apache2/htdocs
          SourceVolume: my-vol
        PortMappings:
        - ContainerPort: 80

      - Name: busybox
        Command: ['/bin/sh -c "while true; do echo ''<html> <head> <title>Amazon ECS
            Sample App</title> <style>body {margin-top: 40px; background-color: #333;}
            </style> </head><body> <div style=color:white;text-align:center> <h1>Amazon
            ECS Sample App</h1> <h2>Congratulations!</h2> <p>Your application is now
            running on a container in Amazon ECS.</p>'' > top; /bin/date > date ;
            echo ''</div></body></html>'' > bottom; cat top date bottom > /usr/local/apache2/htdocs/index.html
            ; sleep 1; done"']
        EntryPoint: [sh, -c]
        Essential: false
        Image: busybox
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'AWS::StackName'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: ecs-demo-app
        VolumesFrom:
        - SourceContainer: simple-app

      Volumes:
      - Name: my-vol

  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'ECSALB']]
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets: !Ref 'Subnets'
      SecurityGroups: [!Ref 'ALBSecurityGroup']

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
#    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      LoadBalancerArn: !Ref 'ECSALB'
      Port: '80'
      Protocol: HTTP

  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ALBListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'ALBListener'
      Priority: 1

  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: ECSTG
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VpcId'
      TargetType: ip

#  ECSAutoScalingGroup:
#    Type: AWS::AutoScaling::AutoScalingGroup
#    Properties:
#      VPCZoneIdentifier: !Ref 'Subnets'
#      LaunchConfigurationName: !Ref 'ContainerInstances'
#      MinSize: 1
#      MaxSize: 1
#      DesiredCapacity: 1
#    CreationPolicy:
#      ResourceSignal:
#        Timeout: PT15M
#    UpdatePolicy:
#      AutoScalingReplacingUpdate:
#        WillReplace: 'true'

#  ContainerInstances:
#    Type: AWS::AutoScaling::LaunchConfiguration
#    Properties:
#      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
#      SecurityGroups: [!Ref 'ECSSecurityGroup']
#      InstanceType: !Ref 'InstanceType'
#      IamInstanceProfile: !Ref 'EC2InstanceProfile'
#      KeyName: !Ref 'KeyName'
#      UserData:
#        Fn::Base64: !Sub |
#          #!/bin/bash -xe
#          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
#          yum install -y aws-cfn-bootstrap
#          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  Service:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: '1'
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - !Ref 'VPCSecurityGroup'
          Subnets: !Ref 'Subnets'
      LoadBalancers:
      - ContainerName: simple-app
        ContainerPort: '80'
        TargetGroupArn: !Ref 'ECSTG'
#      Role: !Ref 'ECSServiceRole'
      TaskDefinition: !Ref 'Task'

#  ECSServiceRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Statement:
#        - Effect: Allow
#          Principal:
#            Service: [ecs.amazonaws.com]
#          Action: ['sts:AssumeRole']
#      Path: /
#      Policies:
#      - PolicyName: ecs-service
#        PolicyDocument:
#          Statement:
#          - Effect: Allow
#            Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
#              'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
#              'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress']
#            Resource: '*'

  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId: !Join ['', [service/, !Ref 'ECSCluster', /, !GetAtt [Service, Name]]]
      RoleARN: !GetAtt [AutoscalingRole, Arn]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AStepPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'ServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 200

  ALB500sAlarmScaleUp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '10'
      AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
      Period: '60'
      AlarmActions: [!Ref 'ServiceScalingPolicy']
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt
            - ECSALB
            - LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold
      MetricName: HTTPCode_ELB_5XX_Count

#  EC2Role:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Statement:
#        - Effect: Allow
#          Principal:
#            Service: [ec2.amazonaws.com]
#          Action: ['sts:AssumeRole']
#      Path: /
#      Policies:
#      - PolicyName: ecs-service
#        PolicyDocument:
#          Statement:
#          - Effect: Allow
#            Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
#              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
#              'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents']
#            Resource: '*'

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm',
              'ecs:DescribeServices', 'ecs:UpdateService']
            Resource: '*'

#  EC2InstanceProfile:
#    Type: AWS::IAM::InstanceProfile
#    Properties:
#      Path: /
#      Roles: [!Ref 'EC2Role']

Outputs:
  ECSService:
    Value: !Ref 'Service'
  ECSCluster:
    Value: !Ref 'ECSCluster'
  ECSALB:
    Description: Your ALB DNS URL
    Value: !Join ['', [!GetAtt [ECSALB, DNSName]]]
  Task:
    Value: !Ref 'Task'
