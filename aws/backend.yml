AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.
Parameters:
  StackName:
    Type: String
    Description: The name of the parent Fargate networking stack that you created. Necessary
                 to locate and reference resources created by that stack.

  Env:
    Type: String
    Default: 'dev'
    Description: Environment type - dev or live

  ImageRepository:
    Type: String
    Default: 376169159073.dkr.ecr.us-east-1.amazonaws.com/
    Description: Image repository

  ImageTag:
    Type: String
    Default: ':latest'
    Description: Image tag

  HttpPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to

  BackendPort:
    Type: Number
    Default: 9003
    Description: What port number the application inside the docker container is binding to

  DBInstanceClass:
    Type: String
    Default: 'db.t2.micro'
    Description: Database instance class

  DBUsername:
    Type: String
    Description: Database username
    Default: 'postgres'

  DBPassword:
    Type: String
    NoEcho: true
    Description: Database password
    Default: 'password'

  DBName:
    Type: String
    Default: starsona

  BucketName:
    Type: String
    AllowedValues:
    - starsona-stb-usea1
    - starsona-prb-usea1
    Description: S3 Bucket name

  QueuePrefix:
    Type: String
    AllowedValues:
    - starsona-stb-usea1
    - starsona-prb-usea1
    Description: SQS prefixes


  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run

  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc

Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]


Resources:

  #--------------------------------------------------------------------------------------------------------------------
  # Common resources
  #--------------------------------------------------------------------------------------------------------------------

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref 'AWS::StackName'
      RetentionInDays: 14

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - !Ref "AWS::NoValue"

  #--------------------------------------------------------------------------------------------------------------------
  # WEB
  # Serves static content and proxies dynamic content to backend NODE at InternalLB:8080
  #--------------------------------------------------------------------------------------------------------------------

  NginxTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['-', [!Ref 'AWS::StackName', 'nginx']]
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      ContainerDefinitions:
        - Name: 'nginx'
          Image: !Join ['', [!Ref 'ImageRepository', 'backend-nginx-aws', !Ref 'ImageTag']]
          PortMappings:
            - ContainerPort: !Ref 'HttpPort'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'AWS::StackName'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'web'
          Ulimits:
          - Name: nofile
            HardLimit: 8192
            SoftLimit: 8192

  WebService:
    Type: AWS::ECS::Service
    DependsOn:
    - WebLoadBalancerRuleHTTP
    - WebLoadBalancerRuleStatic
    - WebLoadBalancerRuleMedia
    Properties:
      ServiceName: 'web'
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']]
      TaskDefinition: !Ref 'NginxTaskDefinition'
      LoadBalancers:
        - ContainerName: 'nginx'
          ContainerPort: !Ref 'HttpPort'
          TargetGroupArn: !Ref 'WebTargetGroup'

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /nginx-status
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Join ['-', [!Ref 'AWS::StackName', 'web']]
      Port: !Ref 'HttpPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]

  WebLoadBalancerRuleHTTP:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'WebTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: ['*']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListenerHTTP']]
      Priority: 1

  WebLoadBalancerRuleStatic:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'WebTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: ['/static/*']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListenerHTTPS']]
      Priority: 10

  WebLoadBalancerRuleMedia:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'WebTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: ['/media/*']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListenerHTTPS']]
      Priority: 20

  #--------------------------------------------------------------------------------------------------------------------
  # POSTGRES
  # Database
  #--------------------------------------------------------------------------------------------------------------------

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: !Ref 'AWS::StackName'
      SubnetIds:
      - Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
      - Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']]

  DB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: !Ref 'DBName'
      AllocatedStorage: 5
      DBInstanceClass: !Ref 'DBInstanceClass'
      Engine: 'postgres'
      EngineVersion: '9.5'
      MasterUsername: !Ref 'DBUsername'
      MasterUserPassword: !Ref 'DBPassword'
      DBSubnetGroupName: !Ref 'DBSubnetGroup'
      VPCSecurityGroups:
        - Fn::ImportValue:
            !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]

  #--------------------------------------------------------------------------------------------------------------------
  # GUNICORN
  # Backend running behind InternalLB:9003
  #--------------------------------------------------------------------------------------------------------------------

  GunicornTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['-', [!Ref 'AWS::StackName', 'gunicorn']]
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      TaskRoleArn: !GetAtt 'InstanceRole.Arn'
      ContainerDefinitions:
        - Name: 'gunicorn'
          Image: !Join ['', [!Ref 'ImageRepository', 'backend-gunicorn', !Ref 'ImageTag']]
          PortMappings:
            - ContainerPort: !Ref 'BackendPort'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'AWS::StackName'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'backend'
          Ulimits:
          - Name: nofile
            HardLimit: 8192
            SoftLimit: 8192
          Environment:
          - { Name: ENV, Value: !Ref 'Env' }
          - { Name: DATABASE_HOST, Value: !GetAtt 'DB.Endpoint.Address' }
          - { Name: DATABASE_NAME, Value: !Ref 'DBName' }
          - { Name: DATABASE_USER, Value: !Ref 'DBUsername' }
          - { Name: DATABASE_PASSWORD, Value: !Ref 'DBPassword' }

  BackendService:
    Type: AWS::ECS::Service
    DependsOn: BackendLoadBalancerRuleHTTPS
    Properties:
      ServiceName: 'backend'
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']]
      TaskDefinition: !Ref 'GunicornTaskDefinition'
      LoadBalancers:
        - ContainerName: 'gunicorn'
          ContainerPort: !Ref 'BackendPort'
          TargetGroupArn: !Ref 'BackendTargetGroup'

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Join ['-', [!Ref 'AWS::StackName', 'backend']]
      Port: !Ref 'BackendPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]

  BackendLoadBalancerRuleHTTPS:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'BackendTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: ['*']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListenerHTTPS']]
      Priority: 30

  #--------------------------------------------------------------------------------------------------------------------
  # S3 Bucket
  #--------------------------------------------------------------------------------------------------------------------

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref 'BucketName'
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Delete

  S3BucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join ['-', ['s3', !Ref 'BucketName']]
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [ "s3:DeleteObject", "s3:GetObject", "s3:PutObject" ]
          Resource:
          - !Join ['', ['arn:aws:s3:::', !Ref 'BucketName', '/*']]
      Roles:
      - Ref: 'InstanceRole'

  SQSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join ['-', ['sqs', !Ref 'AWS::StackName']]
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: "sqs:*"
          Resource:
          - !Join ['', ['arn:aws:sqs:*:', !Ref 'AWS::AccountId', ':', !Ref 'QueuePrefix', '-*']]
      Roles:
      - Ref: 'InstanceRole'
