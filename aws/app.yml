AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.
Parameters:
  StackName:
    Type: String
    Description: The name of the parent Fargate networking stack that you created. Necessary
                 to locate and reference resources created by that stack.

  Env:
    Type: String
    Default: 'dev'
    Description: Environment type - dev or live

  ImageRepository:
    Type: String
    Default: 376169159073.dkr.ecr.us-east-1.amazonaws.com/
    Description: Image repository

  ImageTag:
    Type: String
    Default: ':latest'
    Description: Image tag

  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to

  BackendPort:
    Type: Number
    Default: 9003
    Description: What port number the application inside the docker container is binding to

  DBInstanceClass:
    Type: String
    Default: 'db.t2.micro'
    Description: Database instance class

  DBUsername:
    Type: String
    Description: Database username
    Default: 'postgres'

  DBPassword:
    Type: String
    NoEcho: true
    Description: Database password
    Default: 'password'

  DBName:
    Type: String
    Default: starsona

  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run

  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc

Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

Resources:

  #--------------------------------------------------------------------------------------------------------------------
  # Common resources
  #--------------------------------------------------------------------------------------------------------------------

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref 'AWS::StackName'
      RetentionInDays: 14

  #--------------------------------------------------------------------------------------------------------------------
  # NGINX
  # Serves static content and proxies dynamic content to backend GUNICORN at InternalLB:9003
  #--------------------------------------------------------------------------------------------------------------------

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: 'nginx'
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: 'nginx'
          Image: !Join ['', [!Ref 'ImageRepository', 'starsona-nginx', !Ref 'ImageTag']]
          PortMappings:
            - ContainerPort: !Ref 'HttpPort'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'AWS::StackName'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'nginx'
          Ulimits:
          - Name: nofile
            HardLimit: 8192
            SoftLimit: 8192
          Environment:
          - Name: PRIVATE_LB_HOSTNAME
            Value:
              Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'InternalLB']]

  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: 'nginx'
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']]
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: 'nginx'
          ContainerPort: !Ref 'HttpPort'
          TargetGroupArn: !Ref 'TargetGroup'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /nginx-status
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: 'nginx'
      Port: !Ref 'HttpPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListener']]
      Priority: !Ref 'Priority'

  #--------------------------------------------------------------------------------------------------------------------
  # POSTGRES
  # Database
  #--------------------------------------------------------------------------------------------------------------------

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: !Ref 'AWS::StackName'
      SubnetIds:
      - Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
      - Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']]

  DB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: !Ref 'DBName'
      AllocatedStorage: 5
      DBInstanceClass: !Ref 'DBInstanceClass'
      Engine: 'postgres'
      EngineVersion: '9.5'
      MasterUsername: !Ref 'DBUsername'
      MasterUserPassword: !Ref 'DBPassword'
      DBSubnetGroupName: !Ref 'DBSubnetGroup'
      VPCSecurityGroups:
        - Fn::ImportValue:
            !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]

  #--------------------------------------------------------------------------------------------------------------------
  # GUNICORN
  # Backend running befind InternalLB:9003
  #--------------------------------------------------------------------------------------------------------------------

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: 'gunicorn'
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: 'gunicorn'
          Image: !Join ['', [!Ref 'ImageRepository', 'starsona-gunicorn', !Ref 'ImageTag']]
          PortMappings:
            - ContainerPort: !Ref 'BackendPort'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'AWS::StackName'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'gunicorn'
          Ulimits:
          - Name: nofile
            HardLimit: 8192
            SoftLimit: 8192
          Environment:
          - { Name: ENV, Value: !Ref 'Env' }
          - { Name: DATABASE_HOST, Value: !GetAtt 'DB.Endpoint.Address' }
          - { Name: DATABASE_NAME, Value: !Ref 'DBName' }
          - { Name: DATABASE_USER, Value: !Ref 'DBUsername' }
          - { Name: DATABASE_PASSWORD, Value: !Ref 'DBPassword' }

  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: 'gunicorn'
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']]
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: 'gunicorn'
          ContainerPort: !Ref 'BackendPort'
          TargetGroupArn: !Ref 'TargetGroup'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: 'gunicorn'
      Port: !Ref 'BackendPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PrivateListener']]
      Priority: !Ref 'Priority'


