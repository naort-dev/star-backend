# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2018-05-09 11:21
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        ('role', '0001_initial'),
        ('stargramz', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='StargramzUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(db_index=True, max_length=255, unique=True, verbose_name='Username')),
                ('email', models.EmailField(blank=True, db_index=True, max_length=254, null=True, unique=True, verbose_name='Email')),
                ('first_name', models.CharField(max_length=128, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=128, verbose_name='Last Name')),
                ('nick_name', models.CharField(blank=True, max_length=128, null=True, verbose_name='Stage Name')),
                ('status', models.IntegerField(choices=[(1, 'Pending'), (2, 'Active'), (3, 'Deleted')], db_index=True, default=1, verbose_name='Status')),
                ('is_staff', models.BooleanField(db_index=True, default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='Staff Status')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Designates whether this user should be treated as active. Deselect this instead of deleting accounts.', verbose_name='Active')),
                ('sign_up_source', models.IntegerField(choices=[(1, 'Regular Sign-up'), (2, 'Facebook Sign-up'), (3, 'Google Sign-up'), (4, 'Instagram Sign-up')], default=1, verbose_name='Sign-up Source')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
                ('modified_date', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
                ('gender', models.IntegerField(choices=[(1, 'Male'), (2, 'Female')], db_index=True, default=1, verbose_name='Gender')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, verbose_name='Phone Number')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('reset_id', models.UUIDField(blank=True, default=None, null=True)),
                ('reset_generate_time', models.DateTimeField(blank=True, default=None, null=True)),
                ('profile_photo', models.TextField(blank=True, null=True)),
                ('fb_id', models.CharField(blank=True, max_length=260, null=True, verbose_name='Facebook id')),
                ('in_id', models.CharField(blank=True, max_length=260, null=True, verbose_name='Instagram id')),
                ('gp_id', models.CharField(blank=True, max_length=260, null=True, verbose_name='Google Plus id')),
                ('stripe_customer_id', models.CharField(blank=True, max_length=150, null=True, verbose_name='Stripe Customer ID')),
                ('notification_badge_count', models.IntegerField(default=0, verbose_name='Update fcm notification count')),
                ('show_nick_name', models.BooleanField(default=False, verbose_name='Show Stage Name over legal name')),
                ('completed_view_count', models.IntegerField(default=0, verbose_name='Completed videos count')),
                ('order', models.IntegerField(blank=True, null=True, verbose_name='list order')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', users.models.StargramzUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Celebrity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.DecimalField(decimal_places=2, max_digits=7, verbose_name='Rate')),
                ('rating', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=4, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(5.0)], verbose_name='Celebrity rating')),
                ('weekly_limits', models.IntegerField(verbose_name='Weekly limits')),
                ('profile_video', models.CharField(max_length=250, verbose_name='Profile video')),
                ('follow_count', models.IntegerField(blank=True, default=0, verbose_name='Followers')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('charity', models.TextField(blank=True, verbose_name='Charity')),
                ('availability', models.BooleanField(default=True, verbose_name='Availability')),
                ('admin_approval', models.BooleanField(default=False, verbose_name='Admin Approved')),
                ('featured', models.BooleanField(default=False, verbose_name='Featured')),
                ('remaining_limit', models.IntegerField(blank=True, default=-1, verbose_name='remain limit')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('view_count', models.IntegerField(blank=True, default=0, verbose_name='View Count')),
                ('stripe_user_id', models.CharField(blank=True, max_length=150, null=True, verbose_name='Stripe User ID')),
                ('check_comments', models.CharField(blank=True, max_length=300, null=True, verbose_name='Check Payment Comments')),
                ('check_payments', models.BooleanField(default=False, verbose_name='Check Payment')),
                ('has_fan_account', models.BooleanField(default=False, verbose_name='User has fan Account')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='celebrity_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CelebrityAbuse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abuse_comment', models.CharField(max_length=260)),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
                ('status', models.BooleanField(default=False)),
                ('celebrity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='celebrity_abuse', to=settings.AUTH_USER_MODEL)),
                ('fan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fan_user_abuse', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CelebrityAvailableAlert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_send', models.BooleanField(default=False, verbose_name='Notification Send')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('celebrity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alert_celebrity', to=settings.AUTH_USER_MODEL)),
                ('fan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alert_fan', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CelebrityFollow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
                ('celebrity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='celebrity_follow', to=settings.AUTH_USER_MODEL)),
                ('fan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fan_user_follow', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CelebrityProfession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CelebrityView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
                ('celebrity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='celebrity_view', to=settings.AUTH_USER_MODEL)),
                ('fan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fan_user_view', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceTokens',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_type', models.CharField(max_length=50, verbose_name='Device Type')),
                ('device_id', models.CharField(max_length=255, verbose_name='Device ID')),
                ('device_token', models.CharField(max_length=255, verbose_name='Device Token')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FanRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fan_rate', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=4, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(5.0)], verbose_name='fan_rating')),
                ('comments', models.CharField(max_length=260)),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='created_date')),
                ('celebrity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='celebrity_rate_user', to=settings.AUTH_USER_MODEL)),
                ('fan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fan_rate_user', to=settings.AUTH_USER_MODEL)),
                ('starsona', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='request_rating', to='stargramz.Stargramrequest')),
            ],
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.IntegerField(choices=[(1, 'Celebrity Starsona Request'), (2, 'Celebrity Starsona Message'), (3, 'Celebrity Account Updates'), (4, 'Fan Account Updates'), (5, 'Fan Starsona Messages'), (6, 'Fan Starsona Videos'), (7, 'Fan Email Starsona Videos')], db_index=True, verbose_name='Notification Type')),
                ('message_title', models.CharField(max_length=100, verbose_name='Message title')),
                ('message_content', models.CharField(max_length=255, verbose_name='Message Content')),
                ('status', models.BooleanField(default=False)),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250, verbose_name='title')),
                ('file', models.FileField(blank=True, null=True, upload_to='')),
                ('order', models.IntegerField(blank=True, null=True, verbose_name='list order')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child', to='users.Profession')),
            ],
            options={
                'ordering': ['order', 'title'],
                'verbose_name_plural': 'Professions',
            },
        ),
        migrations.CreateModel(
            name='ProfileImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.CharField(blank=True, max_length=600, null=True, verbose_name='Upload Image')),
                ('status', models.BooleanField(default=True)),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
                ('thumbnail', models.CharField(blank=True, max_length=600, null=True, verbose_name='Thumbnail Image')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SettingsNotifications',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('celebrity_starsona_request', models.BooleanField(default=True)),
                ('celebrity_starsona_message', models.BooleanField(default=True)),
                ('celebrity_account_updates', models.BooleanField(default=True)),
                ('fan_account_updates', models.BooleanField(default=True)),
                ('fan_starsona_messages', models.BooleanField(default=True)),
                ('fan_starsona_videos', models.BooleanField(default=True)),
                ('fan_email_starsona_videos', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='settings_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserRoleMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_complete', models.BooleanField(default=False, verbose_name='Register Completed')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stargramz_role', to='role.Role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stargramz_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='celebrityprofession',
            name='profession',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profession', to='users.Profession'),
        ),
        migrations.AddField(
            model_name='celebrityprofession',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='celebrity_profession', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='stargramzuser',
            name='avatar_photo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile_pic', to='users.ProfileImage'),
        ),
        migrations.AddField(
            model_name='stargramzuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='stargramzuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('users.stargramzuser',),
            managers=[
                ('objects', users.models.StargramzUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CelebrityUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('users.stargramzuser',),
            managers=[
                ('objects', users.models.StargramzUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FanUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('users.stargramzuser',),
            managers=[
                ('objects', users.models.StargramzUserManager()),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='userrolemapping',
            unique_together=set([('user', 'role')]),
        ),
        migrations.AddIndex(
            model_name='profession',
            index=models.Index(fields=['title'], name='users_profe_title_8fe10b_idx'),
        ),
        migrations.AddIndex(
            model_name='stargramzuser',
            index=models.Index(fields=['first_name'], name='users_starg_first_n_941aad_idx'),
        ),
        migrations.AddIndex(
            model_name='stargramzuser',
            index=models.Index(fields=['last_name'], name='users_starg_last_na_2d5f8e_idx'),
        ),
        migrations.AddIndex(
            model_name='stargramzuser',
            index=models.Index(fields=['nick_name'], name='users_starg_nick_na_64a612_idx'),
        ),
    ]
