version: '3.3'
services:
  gunicorn:
    image: backend-gunicorn
    networks:
    - overlay
    ports:
    - "9003:9003"
    restart: on-failure
    depends_on:
    - postgres
    environment:
    - ENV
    - AWS_ACCESS_KEY_ID=${S3_AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${S3_AWS_SECRET_ACCESS_KEY}
    - AWS_STORAGE_BUCKET_NAME=${S3_AWS_STORAGE_BUCKET_NAME}
    - EMAIL_HOST
    - EMAIL_HOST_USER
    - EMAIL_HOST_PASSWORD
    - EMAIL_PORT
    - EMAIL_USE_TLS
    - FCM_SERVER_KEY
    - STRIPE_WEB_HOOK
    - STRIPE_CLIENT_ID
    - STRIPE_SECRET_KEY
    - DATABASE_NAME
    - DATABASE_USER
    - DATABASE_PASSWORD
    - DATABASE_HOST
    - BRANCH_IO_KEY
    - QUEUE_BROKER_URL
    - QUEUE_BACKEND
    - QUEUE_HOST
    - ADMIN_USERNAME
    - ADMIN_PASSWORD
    - TWILIO_ACCOUNT_SID
    - TWILIO_AUTH_TOKEN
    - TWILIO_PHONE_NUMBER
    - AUTHY_API_KEY

  migration:
    image: backend-migration
    networks:
    - overlay
    depends_on:
    - postgres
    environment:
    - ENV
    - DATABASE_NAME
    - DATABASE_USER
    - DATABASE_PASSWORD
    - DATABASE_HOST
    - ADMIN_USERNAME
    - ADMIN_PASSWORD
    command: sh -c './migrations.sh && ./loaddatas.sh'

  celery-beat:
    image: backend-celery
    networks:
    - overlay
    restart: on-failure
    depends_on:
    - postgres
    command: ["celery", "-A", "main", "beat"]
    environment:
    - ENV
    - QUEUE_BROKER_URL
    - QUEUE_BACKEND
    - QUEUE_HOST

  celery-worker:
    image: backend-celery
    networks:
    - overlay
    restart: on-failure
    depends_on:
    - postgres
    - rabbitmq
    command: ["celery", "-A", "main", "worker"]
    environment:
    - ENV
    - AWS_ACCESS_KEY_ID=${S3_AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${S3_AWS_SECRET_ACCESS_KEY}
    - AWS_STORAGE_BUCKET_NAME=${S3_AWS_STORAGE_BUCKET_NAME}
    - AWS_DEFAULT_REGION=${S3_AWS_DEFAULT_REGION}
    - EMAIL_HOST
    - EMAIL_HOST_USER
    - EMAIL_HOST_PASSWORD
    - EMAIL_PORT
    - EMAIL_USE_TLS
    - FCM_SERVER_KEY
    - STRIPE_WEB_HOOK
    - STRIPE_CLIENT_ID
    - STRIPE_SECRET_KEY
    - DATABASE_NAME
    - DATABASE_USER
    - DATABASE_PASSWORD
    - DATABASE_HOST
    - BRANCH_IO_KEY
    - QUEUE_BROKER_URL
    - QUEUE_BACKEND
    - QUEUE_HOST
    - QUEUE_NAME_PREFIX=dev-
    - TWILIO_ACCOUNT_SID
    - TWILIO_AUTH_TOKEN
    - TWILIO_PHONE_NUMBER
    - AUTHY_API_KEY

  celery-videos:
    image: backend-celery
    networks:
    - overlay
    restart: on-failure
    depends_on:
    - postgres
    - rabbitmq
    command: ["celery", "-A", "main", "worker", "-Q", "videos"]
    environment:
    - ENV
    - AWS_ACCESS_KEY_ID=${S3_AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${S3_AWS_SECRET_ACCESS_KEY}
    - AWS_STORAGE_BUCKET_NAME=${S3_AWS_STORAGE_BUCKET_NAME}
    - AWS_DEFAULT_REGION=${S3_AWS_DEFAULT_REGION}
    - EMAIL_HOST
    - EMAIL_HOST_USER
    - EMAIL_HOST_PASSWORD
    - EMAIL_PORT
    - EMAIL_USE_TLS
    - FCM_SERVER_KEY
    - STRIPE_WEB_HOOK
    - STRIPE_CLIENT_ID
    - STRIPE_SECRET_KEY
    - DATABASE_NAME
    - DATABASE_USER
    - DATABASE_PASSWORD
    - DATABASE_HOST
    - BRANCH_IO_KEY
    - QUEUE_BROKER_URL
    - QUEUE_BACKEND
    - QUEUE_HOST
    - TWILIO_ACCOUNT_SID
    - TWILIO_AUTH_TOKEN
    - TWILIO_PHONE_NUMBER
    - AUTHY_API_KEY

  postgres:
    image: postgres:10.5
    volumes:
    - /var/lib/postgresql/data
    networks:
    - overlay
    restart: on-failure
    environment:
    - POSTGRES_USER=${DATABASE_USER}
    - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    - POSTGRES_DB=${DATABASE_NAME}
    - PGDATA=/var/lib/postgresql/data/pgdata

  rabbitmq:
    image: rabbitmq
    networks:
    - overlay
    restart: on-failure
    environment:
    - RABBITMQ_DEFAULT_USER=${QUEUE_USER}
    - RABBITMQ_DEFAULT_PASS=${QUEUE_PASSWORD}

  nginx:
    image: backend-nginx-${DEPLOYMENT_TYPE}
    hostname: ${SSL_SERVER_NAME}
    volumes:
    - /etc/letsencrypt
    networks:
    - overlay
    ports:
    - "${HTTP_PORT:-80}:80"
    - "${HTTPS_PORT:-443}:443"
    restart: on-failure
    depends_on:
    - gunicorn
    environment:
    - SSL_SERVER_NAME
    - SSL_SERVER_EMAIL
    - HTTP_PORT
    - HTTPS_PORT

  memcached:
    image: memcached:1.5
    networks:
    - overlay
    restart: on-failure

networks:
  overlay:

